* Package Management
** Initialize package.el with Melpa
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.org/packages/"))
     (package-initialize)
   #+END_SRC
** use-package
   * Homepage: [[https://github.com/jwiegley/use-package]]

   #+BEGIN_SRC emacs-lisp
     (eval-when-compile
       (unless (require 'use-package nil t)
         (package-refresh-contents)
         (package-install 'use-package)
         (require 'use-package)))
   #+END_SRC
** quelpa
   * Homepage: [[https://github.com/quelpa/quelpa]]

   #+BEGIN_SRC emacs-lisp
     (use-package quelpa
       :ensure t)
   #+END_SRC
** quelpa-use-package
   * Homepage: [[https://github.com/quelpa/quelpa-use-package]]

   #+BEGIN_SRC emacs-lisp
     (use-package quelpa-use-package
       :ensure t)
   #+END_SRC
* evil
** Early settings
   It seems this must be set quite early to have an effect.
   #+BEGIN_SRC emacs-lisp
     (setq evil-want-C-u-scroll t)
   #+END_SRC
** Evil Leader
   * Homepage: [[https://github.com/cofi/evil-leader]]

   Evil Leader is loaded before Evil to make it available in early
   buffers. See [[https://github.com/cofi/evil-leader#usage]].
   #+BEGIN_SRC emacs-lisp
     (use-package evil-leader
       :ensure t

       :config
       (global-evil-leader-mode 1))
   #+END_SRC

   Set leader key:
   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-leader "ÃŸ")
   #+END_SRC
** Evil
   * Homepage: [[https://bitbucket.org/lyro/evil/wiki/Home]]

   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t

       :init
       (setq evil-split-window-below t)
       (setq evil-vsplit-window-right t)
       (setq evil-echo-state nil)

       :config
       (evil-mode 1)

       ;; Use j and k to move by visual lines
       (define-key evil-motion-state-map (kbd "j") 'evil-next-visual-line)
       (define-key evil-motion-state-map (kbd "k") 'evil-previous-visual-line))
   #+END_SRC
** evil-jumper
   evil-jumper provides Vim-like C-i and C-o functions and bindings.
   * Homepage: [[https://github.com/bling/evil-jumper]]

   #+BEGIN_SRC emacs-lisp
     (use-package evil-jumper
       :ensure t
       :defer 5

       :config
       (global-evil-jumper-mode))
   #+END_SRC
* General Settings
** General Settings
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-screen t)
     (setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-emacs-directory))))
     (setq-default indent-tabs-mode nil)
     (setq-default fill-column 100)
   #+END_SRC
** GUI Settings
   #+BEGIN_SRC emacs-lisp
     (menu-bar-mode 0)
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
   #+END_SRC
** VC
   #+BEGIN_SRC emacs-lisp
     (setq vc-follow-symlinks t)
   #+END_SRC
** Smooth Scrolling
   * Homepage: [[https://github.com/aspiers/smooth-scrolling]]

   #+BEGIN_SRC emacs-lisp
     (use-package smooth-scrolling
       :ensure t
       :defer 1

       :init
       (setq smooth-scroll-margin 5)
       (setq scroll-conservatively 101)
       (setq scroll-preserve-screen-position t)
       (setq auto-window-vscroll nil)
       (setq scroll-margin 5))
   #+END_SRC
** Powerline
*** Powerline
    * Homepage: [[https://github.com/milkypostman/powerline]]

    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :ensure t
        :defer t)
    #+END_SRC
*** airline-themes
    * Homepage: [[https://github.com/AnthonyDiGirolamo/airline-themes]]

    #+BEGIN_SRC emacs-lisp
      (use-package airline-themes
        :ensure t
        :defer t

        :init
        (setq airline-helm-colors nil)

        ;; Use glyphs as defined by powerline.
        ;; This is also the more appropriate Unicode area.
        (setq airline-utf-glyph-branch #xe0a0)
        (setq airline-utf-glyph-linenumber #xe0a1)
        (setq airline-utf-glyph-readonly #xe0a2)
        (setq airline-utf-glyph-separator-left #xe0b0)
        (setq airline-utf-glyph-separator-right #xe0b2)
        (setq airline-utf-glyph-subseparator-left #xe0b1)
        (setq airline-utf-glyph-subseparator-right #xe0b3))
    #+END_SRC
** Customize
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+END_SRC
* Plugins
** dash.el
   #+BEGIN_SRC emacs-lisp
     (use-package dash
       :ensure t)
   #+END_SRC
** Undo-Tree
   * Homepage: [[http://www.dr-qubit.org/emacs.php]]

   #+BEGIN_SRC emacs-lisp
     (use-package undo-tree
       :ensure t
       :diminish undo-tree-mode

       :init
       (evil-set-initial-state 'undo-tree-visualizer-mode 'emacs)
       (setq undo-tree-visualizer-diff t)
       (evil-leader/set-key
         "u" 'undo-tree-visualize))
   #+END_SRC
** popwin
   * Homepage: [[https://github.com/m2ym/popwin-el]]

   #+BEGIN_SRC emacs-lisp
     (use-package popwin
       :ensure t

       :config
       (popwin-mode))
   #+END_SRC
** Helm
   * Homepage: [[https://github.com/emacs-helm/helm]]

   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :defer 1
       :diminish helm-mode

       :init
       (evil-leader/set-key
         "x" 'helm-M-x
         "f" 'helm-find-files
         "bb" 'helm-buffers-list)

       (evil-leader/set-key
         "hr" 'helm-resume
         "ho" 'helm-occur
         "hi" 'helm-imenu
         "hm" 'helm-mini
         "hg" 'helm-do-ag)

       :bind (("M-x" . helm-M-x)
              ("C-x C-f" . helm-find-files)
              ("C-x b" . helm-buffers-list))

       :config
       (require 'helm-config)
       (helm-mode 1)
       (define-key helm-map (kbd "TAB") 'helm-execute-persistent-action)
       (define-key helm-map (kbd "<backtab>") 'helm-select-action)
       (define-key helm-map (kbd "C-j") 'helm-next-line)
       (define-key helm-map (kbd "C-k") 'helm-previous-line)

       ;; Let popwin handle Helm windows
       ;; Source: https://www.reddit.com/r/emacs/comments/33qj0p/make_helm_window_always_at_the_bottom_using/
       (push '("^\*helm.+\*$" :regexp t) popwin:special-display-config)

       ;; Disable popwin inside Helm
       (add-hook 'helm-after-initialize-hook
                 (lambda ()
                   (popwin:display-buffer helm-buffer t)
                   (popwin-mode -1)))
       (add-hook 'helm-cleanup-hook (lambda () (popwin-mode 1))))
   #+END_SRC
** helm-ag
   * Homepage: [[https://github.com/syohex/emacs-helm-ag]]

   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure t
       :defer t

       :config
       (require 'grep))
   #+END_SRC
** Magit
   * Homepage: [[http://magit.vc]]
   * Repository: [[https://github.com/magit/magit]]

   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t

       :init
       (evil-set-initial-state 'git-rebase-mode 'emacs)
       (evil-leader/set-key
         "ms" 'magit-status
         "ma" 'magit-stage-file
         "me" 'magit-ediff-dwim)

       :config
       (add-hook 'git-commit-mode-hook 'flyspell-mode))
   #+END_SRC
** Company
   * Homepage: [[https://company-mode.github.io/]]
   * Repository: [[https://github.com/company-mode/company-mode]]

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :defer t
       :diminish company-mode

       :config
       (define-key company-active-map (kbd "C-j") 'company-select-next)
       (define-key company-active-map (kbd "C-k") 'company-select-previous))
   #+END_SRC
** Projectile
   * Homepage: [[https://github.com/bbatsov/projectile]]

   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t

       :config
       (projectile-global-mode 1)
       (evil-leader/set-key
         "pp" 'helm-projectile-find-file
         "pb" 'helm-projectile-switch-to-buffer
         "ps" 'helm-projectile-switch-project
         "pg" 'helm-projectile-ag
         "pk" 'projectile-kill-buffers
         "pc" 'projectile-commander))
   #+END_SRC
** YASnippet
   * Homepage: [[https://github.com/capitaomorte/yasnippet]]

   #+BEGIN_SRC emacs-lisp
     (use-package yasnippet
       :ensure t
       :defer t
       :diminish yas-minor-mode

       :config
       (yas-reload-all)
       (use-package company)
       (add-to-list 'company-backends 'company-yasnippet t))
   #+END_SRC
** Smartparens
   * Homepage: [[https://github.com/Fuco1/smartparens]]

   #+BEGIN_SRC emacs-lisp
     (use-package smartparens
       :ensure t
       :defer t
       :diminish smartparens-mode

       :config
       (require 'smartparens-config))
   #+END_SRC
** guide-key
   * Homepage: [[https://github.com/kai2nenobu/guide-key]]

   #+BEGIN_SRC emacs-lisp
     (use-package guide-key
       :ensure t
       :diminish guide-key-mode

       :init
       (setq guide-key/popup-window-position 'bottom)
       (setq guide-key/recursive-key-sequence-flag t)
       (setq guide-key/guide-key-sequence
             `("C-c" "C-x" "C-h" ,evil-leader/leader))

       :config
       (guide-key-mode 1))
   #+END_SRC
** highlight-indentation
   * Homepage: [[https://github.com/antonj/Highlight-Indentation-for-Emacs]]

   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indentation
       :ensure t
       :defer t
       :diminish highlight-indentation-mode
       :diminish highlight-indentation-current-column-mode)
   #+END_SRC
** flycheck
   * Homepage :: [[http://www.flycheck.org/]]

   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :defer t
       :diminish flycheck-mode)
   #+END_SRC
* Minor Modes
** whitespace-mode
   #+BEGIN_SRC emacs-lisp
     (use-package whitespace
       :defer t
       :diminish whitespace-mode

       :init
       (setq whitespace-style
             '(face trailing empty indentation
                    space-after-tab spaces-before-tab)))
   #+END_SRC
** visual-line-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook
               (lambda ()
                 (global-visual-line-mode 1)
                 (diminish 'visual-line-mode)))
   #+END_SRC
** hl-line-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook (lambda () (global-hl-line-mode 1)))
   #+END_SRC
** show-paren-mode
   #+BEGIN_SRC emacs-lisp
     (setq show-paren-delay 0)
   #+END_SRC
** hideshow
   #+BEGIN_SRC emacs-lisp
     (use-package hideshow
       :defer t
       :diminish hs-minor-mode)
   #+END_SRC
** evil-quickscope
   * Homepage:: [[https://github.com/blorbx/evil-quickscope]]

   #+BEGIN_SRC emacs-lisp
     (use-package evil-quickscope
       :ensure t

       :config
       (global-evil-quickscope-mode 1))
   #+END_SRC
* Major Modes
** Preface
   #+BEGIN_SRC emacs-lisp
     (defun hamster/basic-programming-modes ()
       (interactive)
       (linum-mode 1)
       (whitespace-mode 1)
       (show-paren-mode 1)
       (company-mode 1)
       (yas-minor-mode 1)
       (smartparens-mode 1)
       (hs-minor-mode 1)
       (flycheck-mode 1))

     (defvar hamster/company-backends
       '(company-files company-yasnippet company-dabbrev))

     (defun hamster/make-local-company-backends (&optional backends)
       (set (make-local-variable 'company-backends)
            (list (-concat hamster/company-backends backends))))
   #+END_SRC
** prog-mode
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'hamster/basic-programming-modes)
   #+END_SRC
** Emacs Lisp
   #+BEGIN_SRC emacs-lisp
     (add-hook 'emacs-lisp-mode-hook
               (lambda ()
                 (hamster/make-local-company-backends '(company-capf))))
   #+END_SRC
** Org Mode
   * Homepage: [[http://orgmode.org]]

   #+BEGIN_SRC emacs-lisp
     (setq org-M-RET-may-split-line nil)
     (setq org-src-fontify-natively t)
     (add-hook 'org-mode-hook
               (lambda () (whitespace-mode 1)))
   #+END_SRC
** Ediff
   #+BEGIN_SRC emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
     (setq ediff-auto-refine nil)
     (setq ediff-highlight-all-diffs nil)
   #+END_SRC
** Rust
*** company-racer
    * Homepage: [[https://github.com/emacs-pe/company-racer]]

    #+BEGIN_SRC emacs-lisp
      (use-package company-racer
        :ensure t
        :defer t

        :init
        (unless (getenv "RUST_SRC_PATH")
          (setenv "RUST_SRC_PATH" (expand-file-name "~/code/rust/src")))

        :config
        (add-to-list 'company-backends 'company-racer))
    #+END_SRC
*** rust-mode
    * Homepage: [[https://github.com/rust-lang/rust-mode]]

    #+BEGIN_SRC emacs-lisp
      (use-package rust-mode
        :ensure t
        :mode "\\.rs\\'"

        :config
        (use-package company-racer)
        (add-hook 'rust-mode-hook
                  (lambda ()
                    (hamster/make-local-company-backends '(company-racer))
                    (set (make-local-variable 'compile-command) "cargo build"))))
    #+END_SRC
*** toml-mode
    * Homepage: [[https://github.com/dryman/toml-mode.el]]

    #+BEGIN_SRC emacs-lisp
      (use-package toml-mode
        :ensure t

        :mode "\\.toml\\'")
    #+END_SRC
** Python
*** Elpy
    * Homepage: [[https://github.com/jorgenschaefer/elpy]]
    * Documentation: [[http://elpy.readthedocs.org/en/latest/index.html]]

    #+BEGIN_SRC emacs-lisp
      (use-package elpy
        :ensure t
        :defer t
        :diminish elpy-mode)
    #+END_SRC
*** python-mode
    #+BEGIN_SRC emacs-lisp
      (setq python-shell-interpreter "ipython")
      (add-hook 'python-mode-hook
                (lambda ()
                  (elpy-mode 1)
                  (hamster/make-local-company-backends '(elpy-company-backend))))
    #+END_SRC
** AUCTeX
*** Company-AUCTeX
    * Homepage: [[https://github.com/alexeyr/company-auctex]]

    #+BEGIN_SRC emacs-lisp
      (use-package company-auctex
        :ensure t
        :defer t

        :config
        (company-auctex-init))
    #+END_SRC
*** AUCTeX
    * Homepage: [[https://www.gnu.org/software/auctex/]]
    * Documentation: [[https://www.gnu.org/software/auctex/manual/auctex/index.html]]

    #+BEGIN_SRC emacs-lisp
      (use-package tex-site
        :ensure auctex
        :defer t

        :init
        (use-package company-auctex)
        (add-hook 'TeX-mode-hook
                  (lambda ()
                    (hamster/basic-programming-modes)
                    (hamster/make-local-company-backends
                     '(company-auctex-labels
                       company-auctex-bibs
                       company-auctex-macros
                       company-auctex-symbols
                       company-auctex-environments)))))
    #+END_SRC
** markdown-mode
   * Homepage: [[http://jblevins.org/projects/markdown-mode/]]

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :mode "\\.md\\'")
   #+END_SRC
** yaml-mode
   * Homepage: [[https://github.com/yoshiki/yaml-mode]]

   #+BEGIN_SRC emacs-lisp
     (use-package yaml-mode
       :ensure t
       :mode "\\.yml\\'")
   #+END_SRC
* Theme
** bankert-theme
   * Homepage: [[https://gitlab.com/dennis.hamester/bankert-theme]]

   #+BEGIN_SRC emacs-lisp
     ;TODO: Change to a proper package, when bankert is ready
     (load-file (expand-file-name "~/code/bankert-theme/emacs/bankert-theme.el"))
   #+END_SRC
** Initialize
   #+BEGIN_SRC emacs-lisp
     (defun hamster/setup-theme ()
         (progn
           (load-theme 'bankert t)
           (set-frame-font "Source Code Pro 11" t nil)
           (airline-themes-set-modeline)))

     (if (daemonp)
         (add-hook 'after-make-frame-functions
                   (lambda (frame)
                     (with-selected-frame frame
                       (hamster/setup-theme))))
       (hamster/setup-theme))
   #+END_SRC
* Miscellaneous
  #+BEGIN_SRC emacs-lisp
    (defun hamster/find-emacs-org ()
      "Find ~/.emacs.d/emacs.org"
      (interactive)
      (find-file
       (expand-file-name "~/.emacs.d/emacs.org"))
      (hamster/basic-programming-modes))
  #+END_SRC
* Global Keybindings
** TODO Window Movement
   Make this work *always*.
   Maybe: [[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs/5340797]]

   Use =C-w C-[hjkl]= to move between windows.
   #+BEGIN_SRC emacs-lisp
     (global-unset-key (kbd "C-w"))
     (global-set-key (kbd "C-w C-h") 'evil-window-left)
     (global-set-key (kbd "C-w C-j") 'evil-window-down)
     (global-set-key (kbd "C-w C-k") 'evil-window-up)
     (global-set-key (kbd "C-w C-l") 'evil-window-right)
   #+END_SRC
** Other
   #+BEGIN_SRC emacs-lisp
     (evil-leader/set-key
       "qq" 'save-buffers-kill-emacs
       "cd" 'cd
       "cc" 'comment-dwim
       "bk" 'kill-buffer-and-window
       "bi" 'ibuffer
       "w" 'save-buffer)
   #+END_SRC
