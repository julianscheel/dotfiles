" vim: fdm=marker foldlevel=0

set nocompatible

" {{{ Plugins
call plug#begin('~/.vim/plugins')
Plug 'airblade/vim-gitgutter'
Plug 'jreybert/vimagit'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'mbbill/undotree'
Plug 'mhinz/vim-startify'
Plug 'morhetz/gruvbox'
Plug 'neomake/neomake'
Plug 'osyo-manga/vim-over'
Plug 'PeterRincker/vim-argumentative'
Plug 'rhysd/vim-clang-format'
Plug 'romainl/vim-qf'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-utils/vim-man'
Plug 'vimwiki/vimwiki'
Plug 'LucHermitte/VimFold4C'
Plug 'tpope/vim-sleuth'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'moll/vim-bbye'
Plug 'junegunn/goyo.vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'majutsushi/tagbar'
"Plug 'maralla/completor.vim'
Plug 'reisub0/hot-reload.vim'
Plug 'luochen1990/rainbow'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'junegunn/fzf.vim'
Plug 'fszymanski/fzf-quickfix', {'on': 'Quickfix'}
Plug 'bronson/vim-trailing-whitespace'
Plug 'kergoth/vim-bitbake'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'chriskempson/base16-vim'
Plug 'sflower/xc.vim'
Plug 'LucHermitte/lh-vim-lib'
Plug 'LucHermitte/alternate-lite'
"
call plug#end()
" }}}

" {{{ General settings
if has("autocmd")
	filetype plugin indent on
else
	set autoindent
endif

set autoread
set breakindent
set directory=~/.vim/swapfiles//
set fileformats=unix,dos,mac
set foldlevel=99
set foldmethod=syntax
set foldopen+=jump
set formatoptions+=j
" set grepformat=%f:%l:%c:%m
" set grepprg=rg\ --vimgrep\ $*
set history=1000
set hlsearch
set ignorecase
" set imactivatekey=C-N
set incsearch
set laststatus=2
set linebreak
set mouse=a
set nobackup
set nowritebackup
set number
set scrolloff=12
set shiftwidth=4
set showbreak=...\ \ 
set smartcase
set smarttab
set spelllang=en
set splitbelow
set splitright
set tabstop=8
set termguicolors
set textwidth=100
set timeoutlen=1000
set title
set ttimeoutlen=10
set wildmode=longest,list
set cc=80

autocmd FileType gitcommit setlocal spell
" }}}

" {{{ GUI
if has("gui_running")
    set guifont=Source\ Code\ Pro\ 10
    set guioptions-=e
    set guioptions-=L
    set guioptions-=m
    set guioptions-=r
    set guioptions-=T
endif
" }}}

" {{{ Colorscheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
" }}}

" {{{ Plugin settings

" {{{ 'LucHermitte/alternate-lite'
call lh#alternate#register_extension('g', 'h', g:alternates.extensions.h + ['xc'])
call lh#alternate#register_extension('g', 'xc', ['h'])
let g:alternates.fts.cpp += ['xc', 'c']
" }}}

" {{{ 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline_powerline_fonts = 1
" }}}

" {{{ 'ctrlpvim/ctrlp.vim'
" command B CtrlPBuffer
" command F CtrlP
" command Fu CtrlPMRU
" 
" let g:ctrlp_user_command = {
"     \ 'types': {
"     \ 1: ['.git', 'cd %s; and git ls-files -c --recurse-submodules --exclude-standard'],
"     \ },
"     \ 'fallback': 'find %s -type f'
"     \ }
" }}}

" {{{ 'junegunn/fzf.vim'
command F Files
command Fg Files
command B Buffers
" }}}


" {{{ 'scrooloose/nerdcommenter'
let g:NERDCreateDefaultMappings = 0
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" }}}

" {{{ 'scrooloose/nerdtree'
let NERDTreeChDirMode = 2
" }}}

" {{{ 'Valloric/YouCompleteMe'
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_filetype_blacklist = {
            \ 'tagbar' : 1,
            \ 'qf' : 1,
            \ 'notes' : 1,
            \ 'markdown' : 1,
            \ 'unite' : 1,
            \ 'text' : 1,
            \ 'pandoc' : 1,
            \ 'infolog' : 1,
            \ 'mail' : 1
            \ }
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>', '<C-j>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>', '<C-k>']
" }}}

" {{{ 'vim-pandoc/vim-pandoc'
let g:pandoc#formatting#textwidth = 78
let g:pandoc#formatting#mode = "h"
" }}}

" {{{ 'junegunn/goyo.vim'
function! s:goyo_leave()
    :q
endfunction

autocmd! User GoyoLeave nested call <SID>goyo_leave()
" }}}

" {{{ 'w0rp/ale'
let g:ale_linters = {
            \    'dart': ['language_server'],
            \ }
let g:ale_fixers = {
            \    'dart': ['dartfmt'],
            \ }
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'

map <C-F> :ALEFix<CR>
au FileType dart map <C-]> :ALEGoToDefinition<CR>
" }}}

" {{{ 'vimwiki/vimwiki'
let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]
" }}}

" {{{ 'majutsushi/tagbar'
if !exists("g:tagbar_type_dart")
  nmap <F8> :TagbarToggle<CR>

  let g:tagbar_type_dart = {
            \ 'ctagsbin'   : 'pub',
            \ 'ctagsargs'  : ['global', 'run', 'dart_ctags:tags', '--skip-sort', '--line-numbers'],
            \ 'ctagstype'  : 'dart',
            \ 'kinds'      : [
               \ 'c:classes',
               \ 'f:function',
               \ 'M:static method',
               \ 'm:method',
               \ 'i:field'
            \ ]
         \ }
endif
"             \ 'kind2scope' : {
"                \ 'c' : 'class'
"             \ },
"             \ 'scope2kind' : {
"                \ 'class' : 'c'
"             \ }
" }}}

" {{{ 'neoclide/coc.nvim'
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
"nmap <silent> <C-d> <Plug>(coc-range-select)
"xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" {{{{ coc-flutter
nmap ms
nmap fs :CocCommand flutter.run<cr>
nmap fr :CocCommand flutter.dev.hotReload<cr>
nmap fR :CocCommand flutter.dev.hotRestart<cr>
nmap fl :CocCommand flutter.dev.openDevLog<cr>
nmap fp :CocCommand flutter.dev.debugPaintSizeEnabled<cr>
" }}}

" }}}

" }}}

" {{{ Redundant spaces
highlight RedundantSpaces term=standout ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/ "\ze sets end of match so only spaces highlighted
" }}}

" {{{ Code width
set bs=2
set ts=8
set sts=8
set sw=8
set tw=78
set noexpandtab
" }}}

" {{{ Trailing spaces
" highlight ExtraWhitespace term=standout ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set list!
" }}}

" {{{ Filetype specifics
au BufRead,BufNewFile *.tpl set filetype=htmlm4
au Filetype htmlm4 setlocal sw=2
au Filetype htmlm4 setlocal ts=2
au Filetype htmlm4 setlocal tw=200

" Mail editing using Goyo
au Filetype mail setlocal textwidth=0
au Filetype mail setlocal wrapmargin=0
au Filetype mail setlocal linebreak
au Filetype mail setlocal nobreakindent
au Filetype mail setlocal showbreak=
au FileType mail Goyo | 6

" Make command for markdown
au FileType pandoc let b:dispatch = '/home/julian/git/doc-templates/gendoc %'
au FileType pandoc :nnoremap go :silent !xdg-open %:t:r.pdf &<CR>

" }}}

" {{{ sudo write
cmap w!! w !sudo tee > /dev/null %
" }}}
