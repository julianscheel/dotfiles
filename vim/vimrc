" vim: fdm=marker foldlevel=0

set nocompatible

" {{{ Plugins
call plug#begin('~/.vim/plugins')
Plug 'LucHermitte/VimFold4C'
Plug 'LucHermitte/alternate-lite'
Plug 'LucHermitte/lh-vim-lib'
Plug 'PeterRincker/vim-argumentative'
Plug 'airblade/vim-gitgutter'
Plug 'chrisbra/vim-diff-enhanced'
Plug 'chriskempson/base16-vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'jreybert/vimagit'
Plug 'kergoth/vim-bitbake'
Plug 'lambdalisue/suda.vim'
Plug 'luochen1990/rainbow'
Plug 'mhinz/vim-startify'
Plug 'moll/vim-bbye'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rhysd/vim-clang-format'
Plug 'romainl/vim-qf'
Plug 'rust-lang/rust.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'sflower/xc.vim'
" Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'
Plug 'troydm/zoomwintab.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
"Plug 'vimwiki/vimwiki'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'dhruvasagar/vim-table-mode'
Plug 'cdelledonne/vim-cmake'

Plug 'ibhagwan/fzf-lua', {'branch': 'main'}
Plug 'nvim-tree/nvim-web-devicons'
Plug 'ziontee113/color-picker.nvim'

call plug#end()
" }}}

" {{{ General settings
filetype plugin indent on

set autoread
set breakindent
set directory=~/.vim/swapfiles/
set fileformats=unix,dos,mac
set foldlevel=99
set foldmethod=syntax
set foldopen+=jump
set formatoptions+=j
" set grepformat=%f:%l:%c:%m
" set grepprg=rg\ --vimgrep\ $*
set history=1000
set hlsearch
set ignorecase
" set imactivatekey=C-N
set incsearch
set laststatus=2
set linebreak
set mouse=a
set nobackup
set nowritebackup
set number
set scrolloff=12
"set shiftwidth=4
set showbreak=...\ \ 
set smartcase
set smarttab
set spelllang=en
set splitbelow
set splitright
"set tabstop=8
set termguicolors
set textwidth=100
set timeoutlen=1000
set title
set ttimeoutlen=10
set wildmode=longest,list
set cc=80
set cursorline

autocmd FileType gitcommit setlocal spell

" Allow local per-project vimrc files
set exrc
set secure
" }}}

" {{{ GUI
if has("gui_running")
    set guifont=Source\ Code\ Pro\ 10
    set guioptions-=e
    set guioptions-=L
    set guioptions-=m
    set guioptions-=r
    set guioptions-=T
endif
" }}}

" {{{ Colorscheme
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif
" }}}

" {{{ Plugin settings

" {{{ 'LucHermitte/alternate-lite'
call lh#alternate#register_extension('g', 'h', g:alternates.extensions.h + ['xc'])
call lh#alternate#register_extension('g', 'xc', ['h'])
let g:alternates.fts.cpp += ['xc', 'c']
" }}}

" {{{ 'bling/vim-airline'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" }}}

" {{{ 'ibhagwan/fzf-lua'
command! F FzfLua files
command! B FzfLua buffers
command! T FzfLua tabs
command! Rg FzfLua grep
command! Rw FzfLua grep_cword
command! RW FzfLua grep_cWORD
command! Rv FzfLua grep_visual
" }}}

" {{{ dart-lang/dart-vim-plugin
let g:dart_style_guide = 1
" }}}

" {{{ 'scrooloose/nerdcommenter'
let g:NERDCreateDefaultMappings = 1
let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
" }}}

" {{{ 'scrooloose/nerdtree'
let NERDTreeChDirMode = 2
nnoremap <C-n> :NERDTreeToggle<CR>
" }}}

" {{{ 'vim-pandoc/vim-pandoc'
let g:pandoc#formatting#textwidth = 78
let g:pandoc#formatting#mode = "h"
" }}}

" {{{ 'junegunn/goyo.vim'
function! s:goyo_leave()
    :q
endfunction

autocmd! User GoyoLeave nested call <SID>goyo_leave()
" }}}

" {{{ 'w0rp/ale'
let g:ale_linters = {
            \    'dart': ['language_server'],
            \ }
let g:ale_fixers = {
            \    'dart': ['dartfmt'],
            \ }
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'

map <C-F> :ALEFix<CR>
au FileType dart map <C-]> :ALEGoToDefinition<CR>
" }}}

" {{{ 'vimwiki/vimwiki'
let g:vimwiki_list = [{'path': '~/vimwiki/',
                      \ 'syntax': 'markdown', 'ext': '.md'}]
" }}}

" {{{ 'luochen1990/rainbow'
let g:rainbow_active = 0
" }}}

" {{{ 'ziontee113/color-picker.nvim'
" }}}

" {{{ 'neoclide/coc.nvim'
" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" {{{{ coc-flutter
function! FlutterLog()
  let winNr = bufwinnr("output:///flutter-dev")
  if winNr > 0
    execute winNr . "wincmd w"
  else
    CocCommand flutter.dev.openDevLog
  endif
endfunction

nmap ms
nmap fs :CocCommand flutter.run<cr>
nmap fd :CocList FlutterDevices<cr>
nmap fr :CocCommand flutter.dev.hotReload<cr>
nmap fR :CocCommand flutter.dev.hotRestart<cr>
nmap fq :CocCommand flutter.dev.quit<cr>
nmap fl :call FlutterLog()<cr>
nmap fp :CocCommand flutter.dev.debugPaintSizeEnabled<cr>
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)
" }}}

" }}}

" }}}

" {{{ Redundant spaces
highlight RedundantSpaces term=standout ctermbg=red guibg=red
match RedundantSpaces /\s\+$\| \+\ze\t/ "\ze sets end of match so only spaces highlighted
" }}}

" {{{ Code width
"set bs=2
"set ts=8
"set sts=8
"set sw=8
"set tw=78
"set noexpandtab
" }}}

" {{{ Trailing spaces
" highlight ExtraWhitespace term=standout ctermbg=red guibg=red
" match ExtraWhitespace /\s\+$/
set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·
set list!
" }}}

" {{{ Filetype specifics
" au BufRead,BufNewFile *.tpl set filetype=htmlm4
" au Filetype htmlm4 setlocal sw=2
" au Filetype htmlm4 setlocal ts=2
" au Filetype htmlm4 setlocal tw=200

" Mail editing using Goyo
" au Filetype mail setlocal textwidth=0
" au Filetype mail setlocal wrapmargin=0
" au Filetype mail setlocal linebreak
" au Filetype mail setlocal nobreakindent
" au Filetype mail setlocal showbreak=
" au FileType mail Goyo | 6

" Make command for markdown
au FileType pandoc let b:dispatch = '/home/julian/git/doc-templates/gendoc %'
au FileType pandoc :nnoremap go :silent !xdg-open %:t:r.pdf &<CR>

" Use space indent for JSON, HTML, XML and YAML
:autocmd FileType json,html,xml,yaml call SetSpaceIndent()
function SetSpaceIndent()
	set tabstop=2
	set shiftwidth=2
	set expandtab
endfunction

" }}}

" {{{ sudo write
cmap w!! w !sudo tee > /dev/null %
" }}}
